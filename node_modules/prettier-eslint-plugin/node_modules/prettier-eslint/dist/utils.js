'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultEslintConfig = exports.getOptionsForFormatting = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _commonTags = require('common-tags');

var _dlv = require('dlv');

var _dlv2 = _interopRequireDefault(_dlv);

var _loglevelColoredLevelPrefix = require('loglevel-colored-level-prefix');

var _loglevelColoredLevelPrefix2 = _interopRequireDefault(_loglevelColoredLevelPrefix);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = (0, _loglevelColoredLevelPrefix2.default)({ prefix: 'prettier-eslint' });

/* eslint import/prefer-default-export:0 */
exports.getOptionsForFormatting = getOptionsForFormatting;
exports.defaultEslintConfig = defaultEslintConfig;


function defaultEslintConfig() {
  var eslintConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return (0, _lodash2.default)({}, defaultConfig, eslintConfig);
}

function getOptionsForFormatting(eslintConfig) {
  var prettierOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var eslint = getRelevantESLintConfig(eslintConfig);
  var prettier = getPrettierOptionsFromESLintRules(eslint, prettierOptions);
  return { eslint, prettier };
}

function getRelevantESLintConfig(eslintConfig) {
  var rules = eslintConfig.rules;
  // TODO: remove rules that are not fixable for perf
  // this will require we load the config for every rule...
  // not sure that'll be worth the effort
  // but we may be able to maintain a manual list of rules that
  // are definitely not fixable. Which is what we'll do for now...

  var rulesThatWillNeverBeFixable = [
  // TODO add more
  'no-var', 'prefer-const', 'valid-jsdoc', 'global-require', 'no-with'];

  logger.debug('reducing eslint rules down to relevant rules only');
  var relevantRules = Object.keys(rules).reduce(function (rulesAccumulator, ruleName) {
    if (rulesThatWillNeverBeFixable.indexOf(ruleName) === -1) {
      logger.trace(`adding to relevant rules:`, JSON.stringify({ [ruleName]: rules[ruleName] }));
      rulesAccumulator[ruleName] = rules[ruleName];
    } else {
      logger.trace(`omitting from relevant rules:`, JSON.stringify({ [ruleName]: rules[ruleName] }));
    }
    return rulesAccumulator;
  }, {});

  return _extends({
    // defaults
    useEslintrc: false
  }, eslintConfig, {
    // overrides
    rules: relevantRules,
    fix: true,
    globals: [] });
}

/**
 * This accepts an eslintConfig object and converts
 * it to the `prettier` options object
 */
function getPrettierOptionsFromESLintRules(eslintConfig, prettierOptions) {
  var rules = eslintConfig.rules;

  var optionGetters = {
    printWidth: getPrintWidth,
    tabWidth: getTabWidth,
    parser: getParser,
    singleQuote: getSingleQuote,
    trailingComma: getTrailingComma,
    bracketSpacing: getBraketSpacing
  };

  return Object.keys(optionGetters).reduce(function (options, key) {
    var givenOption = prettierOptions[key];
    var optionIsGiven = prettierOptions[key] !== undefined;
    var getter = optionGetters[key];
    options[key] = optionIsGiven ? givenOption : getter(rules);
    return options;
  }, {});
}

function getPrintWidth(rules) {
  return getRuleValue(rules, 'max-len', 80, 'code');
}

function getTabWidth(rules) {
  var value = getRuleValue(rules, 'indent', 2);
  // if the value is not a number, default to 2
  // use-case is 'tab' where prettier doesn't
  // allow tabs.
  return typeof value === 'number' ? value : 2;
}

function getSingleQuote(rules) {
  var value = getRuleValue(rules, 'quotes', 'single');
  return value === 'single';
}

function getTrailingComma(rules) {
  var value = getRuleValue(rules, 'comma-dangle');
  if (typeof value === 'undefined') {
    var actualValue = rules['comma-dangle'];
    if (typeof actualValue === 'object') {
      return getValFromObjectConfig(actualValue);
    }
  }

  return value === 'never' ? 'none' : 'all';

  function getValFromObjectConfig(eslintValue) {
    var _eslintValue = _slicedToArray(eslintValue, 2),
        _eslintValue$ = _eslintValue[1],
        arrays = _eslintValue$.arrays,
        objects = _eslintValue$.objects,
        functions = _eslintValue$.functions;

    var es5 = [arrays, objects].some(isAlways);
    var fns = isAlways(functions);
    // eslint-disable-next-line no-nested-ternary
    return fns ? 'all' : es5 ? 'es5' : 'none';
  }
}

function getParser() {
  // TODO: handle flow parser config
  return 'babylon';
}

function getBraketSpacing(rules) {
  var value = getRuleValue(rules, 'object-curly-spacing', 'never');
  return value !== 'never';
}

function getRuleValue(rules, name, defaultValue, objPath) {
  var ruleConfig = rules[name];
  if (Array.isArray(ruleConfig)) {
    var _ruleConfig = _slicedToArray(ruleConfig, 2),
        value = _ruleConfig[1];

    if (typeof value === 'object') {
      if (objPath) {
        logger.trace(_commonTags.oneLine`
            Getting the value from object configuration of ${name}.
            delving into ${JSON.stringify(value)} with path "${objPath}"
          `);
        return (0, _dlv2.default)(value, objPath, defaultValue);
      } else {
        logger.debug(_commonTags.oneLine`
            The ${name} rule is using an object configuration
            of ${JSON.stringify(value)} but prettier-eslint is
            not currently capable of getting the prettier value
            based on an object configuration for ${name}.
            Please file an issue (and make a pull request?)
          `);
      }
    } else {
      logger.trace(_commonTags.oneLine`
          The ${name} rule is configured with a
          non-object value of ${value}. Using that value.
        `);
      return value;
    }
  }
  logger.debug(_commonTags.oneLine`
      The ${name} rule is not configured,
      using default of ${defaultValue}
    `);
  // no value configured
  return defaultValue;
}

function isAlways(val) {
  return val.indexOf('always') === 0;
}